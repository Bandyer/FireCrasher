apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

def gitHubUsername = "Bandyer"
def gitHubProjectName = "FireCrasher"

// initialize - do not modify this if your project is on github
def siteUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}"
def gitUrl = siteUrl + '.git'
def projectName = gitHubProjectName

// end - do not modify this if your project is on github
def projectDesc = "This library is a android crash handler."
def projectGroup = "com.bandyer"
def projectLicenses = ["Apache-2.0"]
def projectLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
def developerFullName = "Bandyer Srl"

group = projectGroup
version = "1.0.2"

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 14
        versionName "2.0.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

install {
    repositories.mavenInstaller {
        pom.project {
            name projectName
            description projectDesc
            packaging 'aar'
            groupId projectGroup
            version version
            url siteUrl
            licenses {
                license {
                    name projectLicenses[0]
                    url projectLicenseUrl
                }
            }
            developers {
                developer {
                    id gitHubUsername
                    name developerFullName
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = "s3://maven-bandyer/releases/"
                credentials(AwsCredentials) {
                    accessKey = properties.getProperty("maven.accessKey")
                    secretKey = properties.getProperty("maven.secretKey")
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release
                groupId = projectGroup
                artifactId = project.getName()
                version = version
                artifact kdocJar
                artifact sourcesJar
            }
        }
    }
}

task invalidateCache(type: Exec) {
    workingDir '../scripts'
    def publishPath = "releases"
    def packageName = projectGroup + "." + project.getName()
    commandLine 'python', './invalidate_s3_cache.py', properties.getProperty("maven.accessKey"), properties.getProperty("maven.secretKey"), properties.getProperty("maven.distributionId"), publishPath, packageName ,version
}

task publishUpload {
    def dryRun = false
    def publishTask = 'publishToMavenLocal'
    if(!dryRun) publishTask = 'publish'
    dependsOn publishTask
    dependsOn 'invalidateCache'
    tasks.findByName('invalidateCache').mustRunAfter publishTask
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

def createApiDoc(def name, def format, def dir) {
    return tasks.create(name, org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = format
        outputDirectory = dir
        configuration {
            skipEmptyPackages = true // Do not create index pages for empty packages
            reportUndocumented = true

            externalDocumentationLink {
                url = new URL("https://developer.android.com/reference/")
                packageListUrl = new URL("https://developer.android.com/reference/android/support/package-list")
            }

            // Allows to customize documentation generation options on a per-package basis
            // Repeat for multiple packageOptions
            perPackageOption {
                prefix = "kotlin" // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                skipDeprecated = false
                reportUndocumented = true // Emit warnings about not documented members
                includeNonPublic = false
            }
            // Suppress a package
            perPackageOption {
                prefix = "kotlin.internal" // will match kotlin.internal and all sub-packages of it
                suppress = true
            }
        }
    }
}

task dokkaDoc() {
    dependsOn createApiDoc("genJavaDoc", "html", "$buildDir/kDoc")
    dependsOn createApiDoc("genKDoc", "javadoc", "$buildDir/jDoc")
}

task jdocJar(type: Jar, dependsOn: dokkaDoc) {
    classifier = 'javadoc'
    from "$buildDir/jDoc"
}

task kdocJar(type: Jar, dependsOn: dokkaDoc) {
    classifier = 'kdoc'
    from "$buildDir/kDoc"
}

artifacts {
    archives kdocJar
    archives sourcesJar
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
